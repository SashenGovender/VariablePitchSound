;*  Title: 		Variable Pitch Sound Source
;*  Author: 	Sashen Govender
;*  Date: 		05 September 2012
;*  Version: 	1.0
;*  File Name:  210513093P3.asm
;*
;------------------------------------------------------------------------------------
;***************Overview***************Overview***************Overview***************
;------------------------------------------------------------------------------------
; This program generates a continuous variable sound source that plays a low
; intensity sound into your headphones. The frequency of sound varies from 200Hz to
; 3000Hz with the actual frequency being dependent upon the setting of the variable
; resistor. Twenty-Four different selectable frequencies where setup to produce a
; smooth transition from one frequency to another as the voltage on the input pin
; increased. The sound wave is generated by the PWM channel of the PIC16F690 at a
; duty cycle of 50%. This program consider only the upper 8 bits of the ADC conversion
; result. The 2 LSBs where discared.

;------------------------------------------------------------------------------------
;***********Important Info**********Important Info***********Important Info**********
;------------------------------------------------------------------------------------

; Files required:	None
; Clock Speed:		4Mhz
; Microchip:		PIC16F690
; Macros:			None
; Interrupts:		Timer0 Overflow, ADC conversion complete
; Timer usage:		Timer0, Timer2 (for PWM)

; Code Performance figures:
; Program memory = 133************************************************************
; Max Stack Depth:	2

;------------------------------------------------------------------------------------
;*********Pin Connections**********Pin Connections**********Pin Connections**********
;------------------------------------------------------------------------------------
;	Pin 1 (Vdd):		Vdd = 5V (used also as the reference voltage for the ADC conversion)
;	Pin 5 (CCP1):		PWM output pin
;	Pin 13 (AN10):	Analogue input pin for the variable resistor
;	Pin 20 (Vss):		Vss= 0V

;------------------------------------------------------------------------------------
;*****Configuration Section*****Configuration Section*****Configuration Section******
;------------------------------------------------------------------------------------
list p=16F690
#include <p16f690.inc>

__CONFIG _CP_OFF & _CPD_OFF & _BOR_OFF & _MCLRE_ON & _WDT_OFF & _PWRTE_ON &_INTRC_OSC_NOCLKOUT & _FCMEN_OFF & _IESO_OFF

cblock 0x20

		TempR 				; Used as a temporary register for various operations
		PR2_Loc 			; store the location of the new PR2(frequency) value to load, found in the jump table
		ADC_Result 			; saves the ADC conversions eight MSBs (discard the 2 LSBs )
		W_Save				; register to save the W Reg while in the ISR
		STATUS_Save 		; register to save the Status Reg while in the ISR
endc

org 0x00
	goto Initialise

org 0x04
	goto ISR
;------------------------------------------------------------------------------------
;**************Intialise**************Intialise**************Intialise***************
;------------------------------------------------------------------------------------
Initialise:

		;set clock frequency to 4Mhz
		banksel OSCCON
		movlw b'01100101'
							; Bit6-4: 	110 => 	4Mhz
							; Bit3: 	0 	=> 	Internal Oscillator
							; Bit2: 	1 	=> 	High Frequency Stable (enabled)
							; Bit0: 	1 	=> 	Internal Oscillator for system clock
		movwf OSCCON
;------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------
		;PWM setup
		banksel CCP1CON
		movlw b'00001100'
							; Bit7-6: 	00 	=> single output
							; Bit3-0:	1100=> PWM Mode P1A active-high
		movwf CCP1CON
		bsf T2CON, T2CKPS1	; T2CKPS: 	11	=> Prescaler 16
		bsf T2CON, T2CKPS0
		bsf T2CON, TMR2ON	; set Timer2 on
		clrf TMR2
		clrf PIR1			; Reset peripheral interrupt flags
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------
		;Enable ADC converter interrupt
		banksel PIE1
		movlw b'01000000'
		movwf PIE1
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------
		bcf TRISC,5			; PWM output pin
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------
		;Setup Timer0 with overflow interrupts
		call Config_Timer0
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------
		;ADC setup
		banksel ADCON1
		movlw b'00010000'
							; Bit6-4:	100 => Fosc/4
		movwf ADCON1
		banksel ADCON0
		movlw b'00101001'
							; Bit7:		0 	=> Left justified
							; Bit6:		0	=> Voltage Refference is Vdd
							; Bit5-2:	1010=>Analogue channel AN10
		movwf ADCON0
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------
		banksel TRISB
		bsf TRISB,4			; AN10(RB4) pin used as an  input
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------
		;Make all inputs digital accept RB4(AN10) pin
		banksel ANSEL
		clrf ANSEL
		clrf ANSELH
		bsf ANSELH,2		; Set AN10 pin to analogue input ( input for the variable resistor)
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------
;******************Main******************Main******************Main*******************
;-------------------------------------------------------------------------------------
;Infinite loop waiting for interrupts to occur
Main:
		goto Main

;-------------------------------------------------------------------------------------
;***********Config_Timer0***********Config_Timer0***********Config_Timer0*************
;-------------------------------------------------------------------------------------
;setup timer0 for overflow interrupt
Config_Timer0:

		banksel OPTION_REG
		movlw b'00000111'
							; Bit5: 	 0	=> Timer mode(TOCS)
							; Bit3:  	 0 	=> Prescaler assigned to the timer
							; Bit2-Bit0: 111=> Prescaler 1:256
		movwf OPTION_REG
		banksel INTCON
		movlw b'11100000'
							; Bit7:		 1 => enable global interrupts
							; Bit6:		 1 => enable peripheral interrupt
							; Bit5: 	 1 => enable Timer0 overflow interrupt
							; Bit2:		 0 => clear Timer0 interrupt flag bit
		movwf INTCON
		movlw D'20'			; '20' => to implement an overflow 'delay' of 5.12ms
		movwf TMR0
		return
;-------------------------------------------------------------------------------------
;*******************ISR*******************ISR*******************ISR*******************
;-------------------------------------------------------------------------------------
;
ISR:
		call Save_Reg

		banksel INTCON
		btfsc INTCON,T0IF	; check if Timer0 interrupt had occured
		goto Timer0_ISR

		banksel PIR1
		btfsc PIR1,ADIF		; check if the ADC conversion complete had occured
		goto ADC_ISR
		goto End_ISR

;-------------------------------------------------------------------------------------
;**************Timer0_ISR**************Timer0_ISR**************Timer0_ISR*************
;-------------------------------------------------------------------------------------
;Timer0 interrupt is used to initiate the ADC conversion every 5.12ms
Timer0_ISR:
		bcf INTCON,T0IF		; clear the Timer0 overflow flag bit
		banksel ADCON0
		bsf ADCON0,GO		; start the ADC conversion
		call Config_Timer0	; re-intialise the Timer0 settings
		goto End_ISR

;-------------------------------------------------------------------------------------
;****************ADC_ISR****************ADC_ISR****************ADC_ISR****************
;-------------------------------------------------------------------------------------
;ADC interupt is used to process the conversion result
ADC_ISR:

		bcf PIR1,ADIF		; clear the ADC complete interrupt flag bit
		banksel ADRESH
		movf ADRESH,W

		banksel ADC_Result
		movwf ADC_Result	; save the ADC conversion result
		call Update_PR2		; find the new PR2 value required to generate a new frequency
		call Update_PWM_Freq; generate the new PWM frequency

;-------------------------------------------------------------------------------------
;****************End_ISR****************End_ISR****************End_ISR****************
;-------------------------------------------------------------------------------------
End_ISR:
		call Load_Reg
		retfie

;-------------------------------------------------------------------------------------
;****************Save_Reg***************Save_Reg***************Save_Reg***************
;-------------------------------------------------------------------------------------
; Save the content of the STATUS and W registers
Save_Reg:
		movwf W_Save
		movf STATUS,W
		movwf STATUS_Save
		return

;-------------------------------------------------------------------------------------
;****************Load_Reg***************Load_Reg***************Load_Reg***************
;-------------------------------------------------------------------------------------
; Load the saved content of the STATUS and W registers
Load_Reg:
		movf STATUS_Save,W
		movwf STATUS
		swapf W_Save,F
		swapf W_Save,W
		return

;-------------------------------------------------------------------------------------
;***********Update_PWM_Freq**********Update_PWM_Freq**********Update_PWM_Freq*********
;-------------------------------------------------------------------------------------
; Description: Generate a new PWM frequency at 50% duty cycle

; No. of Instructions:  8 (call + return)
; Registers used :      W, PR2, CCPR1L
; Execution Time : 		36uS (9 cycles=>best case when units digit is not ten)
; Stack Depth : 		1
; Flags Used :          C
; Input :               None
; Output :              updates the PWM Frequency

Update_PWM_Freq:
		banksel PR2
		movwf PR2
		bcf STATUS,C
		rrf PR2,W 		;load half of the PR2 value into CCPR1l to obatin a 50% duty cycle
		banksel CCPR1L
		movwf CCPR1L
		return

;-------------------------------------------------------------------------------------
;**************Update_PR2**************Update_PR2**************Update_PR2*************
;-------------------------------------------------------------------------------------
; obtain a new PWM frequency to output, coresponding to the anlogue input value in the
; ACD_Result register
; The value returned is the new PR2 value required to obtain a certain frequency
; that is determined by the ADC conversion result.
; It was found that the ADC value for: min resistance==>1
;					   				   max resistance==>231
; If the ADC conversion result falls within a certain range of ten then the corresponding
; PR2 value is choosen to obtain the PWM frequency required.


; No. of Instructions:  35 (call + return)
; Registers used :      W, PR2_Loc,PR2_Value,PCL,ADC_Result
; Execution Time : 		36uS (9 cycles=>best case when units digit is not ten)
; Stack Depth : 		1
; Flags Used :          C
; Input :               None
; Output :              new PR2 value to*************)updates the PWM Frequency
Update_PR2:
		clrf PR2_Loc
		movlw D'10'
		bcf STATUS,C


Find:						; locate the 'address' of the correct PR2 value found in the jump table,
		subwf ADC_Result,F	; to generate a specific frequency
		btfss STATUS,C
		goto PR2_Value
		incf PR2_Loc
		goto Find

PR2_Value:
		movf PR2_Loc,W
		addwf PCL,F		; Moves PCL to the location of the correct PR2 value

;----------PR2 value---Frequency---ADC Conversion Value Range----------------------
		retlw D'255'	;245hz;;;;;;;0-9
		retlw D'240'	;260hz;;;;;;;10-19
		retlw D'223'	;280hz;;;;;;;20-29
		retlw D'208'	;300hz;;;;;;;30-39
		retlw D'183'	;340hz;;;;;;;40-49
		retlw D'168'	;370hz;;;;;;;50-59
		retlw D'156'	;400hz;;;;;;;60-69
		retlw D'142'	;440hz;;;;;;;70-79
		retlw D'130'	;480hz;;;;;;;80-89
		retlw D'124'	;500hz;;;;;;;90-99
		retlw D'113'	;550hz;;;;;;;100-109
		retlw D'104'	;600hz;;;;;;;110-119
		retlw D'91'		;680hz;;;;;;;120-129
		retlw D'84'		;740hz;;;;;;;130-139
		retlw D'76'		;820hz;;;;;;;140-149
		retlw D'69'		;900hz;;;;;;;150-159
		retlw D'57'		;1080hz;;;;;;160-169
		retlw D'49'		;1260hz;;;;;;170-179
		retlw D'41'		;1500hz;;;;;;180-189
		retlw D'34'		;1800hz;;;;;;190-199
		retlw D'25'		;2450hz;;;;;;200-209
		retlw D'24'		;2600hz;;;;;;210-219
		retlw D'20'		;3000hz;;;;;;220-229
		retlw D'18'		;3400hz;;;;;;230-239

end
;------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------